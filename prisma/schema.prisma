// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String  @id @unique @default(uuid())
  username        String  @unique
  password_digest String?
  email           String  @unique
  image           String  @default("/no-profile.png")
  profileId       String  @unique

  Profile           Profile         @relation(fields: [profileId], references: [id], onDelete: Cascade)
  Posts             Post[]
  Comments          Comment[]
  OwnedCommunities  Community[]     @relation("ownedCommunities")
  JoinedCommunities UserCommunity[]
  CommentLike       CommentLike[]

  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
  PostLike  PostLike[]
}

model Profile {
  id   String @id @unique @default(uuid())
  User User?

  bio     String?
  haveBio Boolean

  featuredTrack     String?
  haveFeaturedTrack Boolean

  featuredVideo     String?
  haveFeaturedVideo Boolean

  backgroundImage       String?
  backgroundColor       String  @default("rgba(0,0,0,0)")
  profileContainerImage String?
  profileContainerColor String  @default("rgb(255,255,255)")
}

model Post {
  id          String   @id @unique @default(uuid())
  headline    String
  tags        String[] @default([])
  content     String
  userId      String
  communityId String

  User      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  Community Community  @relation(fields: [communityId], references: [id], onDelete: Cascade)
  Comments  Comment[]
  PostLike  PostLike[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model PostLike {
  id     String @id @unique @default(uuid())
  userId String
  postId String

  User    User @relation(fields: [userId], references: [id], onDelete: Cascade)
  Comment Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([userId, postId])
}

model Comment {
  id          String @id @unique @default(uuid())
  content     String
  userId      String
  postId      String
  communityId String

  replyToId String?

  User        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  Post        Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  ReplyTo     Comment?      @relation("ChildComments", fields: [replyToId], references: [id], onDelete: Cascade)
  Replies     Comment[]     @relation("ChildComments")
  CommentLike CommentLike[]
  Community   Community     @relation(fields: [communityId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model CommentLike {
  id        String @id @unique @default(uuid())
  userId    String
  commentId String

  User    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  Comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([userId, commentId])
}

model Community {
  id          String   @id @unique @default(uuid())
  title       String   @default("undefined")
  ownerId     String
  description String   @default("")
  tags        String[] @default([])

  Owner   User            @relation(name: "ownedCommunities", fields: [ownerId], references: [id], onDelete: Cascade)
  Members UserCommunity[]
  Posts   Post[]
  Comment Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model UserCommunity {
  id          String @id @unique @default(uuid())
  userId      String
  communityId String

  User      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  Community Community @relation(fields: [communityId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([userId, communityId])
}
